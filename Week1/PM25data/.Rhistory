q()
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
getwd()
getwd()
read.csv("analysis.csv")
x <- 1:20
x
x <- c(0.5,0.6)
x
x <- c("a","b","c")
x
x <- 0:6
x
as.logic(x)
as.logical(x)
m <- matrix(nrow = 2, ncol = 3)
dim()
dim(m)
attributes(m)
m
x <- 1:3
y <- 11:13
x
y
cbind(x,y)
rbind(x,y)
help(lm)
x <- factor(c("yes","yes","no","yes","no"),levels= c("yes","no"))
x
unclass(x)
x <- 1:3
names(x)
names(x) <- c("foo","bar","norf")
names(x) <- c("foo","bar","norf")
x
names(x)
x <- list(a=1, b=2, c=3)
x
x <- matrix(1:4, nrow =2, ncol =2)
x
dimnames(m) <- list(c("a","b"))
m
dimnames(x) <- list(c("a","b"))
x
x <- c("a","b","c")
x[1]
x[2]
x[1;4]
x[1:4]
x[x>"a"]
u <- x>"a"
u
x[u]
x <- matrix(1:6,2,3)
x
x[1,2]
x[2,1]
x[1,]
x[,3]
x[1,2,drop=false]
x[1,2,drop=FALSE]
x <- matrix(1:6,2,3)
x
x <- 1:10
if(x > 5) {
x <- 0
}
args(paste)
args(cat)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
add2 <- function(x,y){
x+y
}
add2(3,5)
above <- function(x,n){
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n=10){
use <- x>n
x[use]
}
x <- 1:20
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
above
search()
ls(environment(above))
get("x",environment(above))
x <- as.Date("1970-01-01")
x
x <- as.Date("1980-01-01")
unclass(x)
x <- Sys.time()
unclass(x)
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
?strptime
install.packages("RMySQL")
install.packages("C:/Program1/R/R-3.1.0/library/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("C:/Program1/R/R-3.1.0/library/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
library(RMySQL)
utils:::menuInstallPkgs()
utils:::menuInstallLocal()
q()
install.packages("C:/Program1/R/R-3.1.0/library/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "876250140bf4f01629d2")
myapp <- oauth_app("github", key="876250140bf4f01629d2",secret="1b477e2e2d0aa4998d273c7d2d00c55160618c25")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", key="876250140bf4f01629d2",secret="1b477e2e2d0aa4998d273c7d2d00c55160618c25")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key="876250140bf4f01629d2",secret="1b477e2e2d0aa4998d273c7d2d00c55160618c25")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="876250140bf4f01629d2",secret="c247c222986e5c34ddf8c70665d6f276dda826cc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="876250140bf4f01629d2",secret="c247c222986e5c34ddf8c70665d6f276dda826cc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="876250140bf4f01629d2",secret="c247c222986e5c34ddf8c70665d6f276dda826cc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json1 = content(req)
json1
json1$created_at
json1[[30]]
json1[[30]]
content(req)
json1 = content(req)
json1$url
json1 = content(req)
json1
json1[[30]]
json1[[30]]$id
json1[[30]]$url
json1[[]]$url
json1[[1]]$url
json1[[1:30]]$url
json1[[,30]]$url
json1[[1]]$url
for(i in 30){
json1[[i]]$url
}
for(i in 1:30){
json1[[i]]$url
}
json1[[1]]$url
json1[[2]]$url
json1[[3]]$url
json1[[4]]$url
json1[[5]]$url
json1[[5]]$created_at
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[10]
nchar(htmlCode[10])
c(nchar(htmlCode[10]),nchar(htmlCode[20]),nchar(htmlCode[30]),nchar(htmlCode[100]))
read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for")
read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for", widths=5)
aaa <- read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for", widths=5)
aaa
aaa[1]
aaa[1]
aaa[1,1]
aaa <- read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for", widths=6)
aaa[1,1]
aaa <- read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for", widths=9)
aaa[1,1]
aaa <- read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for", widths=10)
source('~/.active-rstudio-document', echo=TRUE)
aaa <- read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for", widths=10)
aaa[1,1]
head(aaa)
aaa[,4]
aaa[4,]
aaa[1,4]
View(aaa)
View(aaa)
aaa <- read.fwf("C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for", widths=50)
aaa[1,1]
View(aaa)
View(aaa)
aaa[4,]
aaa[,4]
aaa <- read.fwf(file, widths=c(10,10,10))
file = "C:/Jing/ProgramCode/DataScience/C3_GetCleanData/getdata-wksst8110.for"
aaa <- read.fwf(file, widths=c(10,10,10))
aaa[1,1]
View(aaa)
View(aaa)
aaa <- read.fwf(file, widths=c(10,10,10),header = TRUE, sep = "\t")
aaa <- read.fwf(file, "03JAN1990","23.4-0.4")
aaa <- read.fwf(file, widths = c(10,20,30))
View(aaa)
View(aaa)
aaa <- read.fwf(file, widths = c(10,18,30))
View(aaa)
View(aaa)
aaa <- read.fwf(file, widths = c(10,18,18))
View(aaa)
View(aaa)
aaa <- read.fwf(file, widths = c(10,18,15))
View(aaa)
View(aaa)
View(aaa)
aaa <- read.fwf(file, widths = c(10,18,10))
View(aaa)
View(aaa)
aaa <- read.fwf(file, widths = c(10,18,10,10,10))
View(aaa)
View(aaa)
aaa <- read.fwf(file, widths = c(10,18,10,12,10))
View(aaa)
View(aaa)
x <- list(a = matrix(1:4,2,2))
x
x <- list(a = matrix(1:4,2,2), b = matrix(1:6,3,2))
x
lapply(x, function(elt) elt[,1])
str(lm)
summary(str)
rm(ls=list())
rm(list=ls())
setwd("C:/Jing/ProgramCode/DataScience/C3_ExploratoryDataAnalysis/Week1/PM25data/data")
getwd()
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric","character","factor","numeric","numeric"))
setwd("C:/Jing/ProgramCode/DataScience/C3_ExploratoryDataAnalysis/Week1/PM25data/")
getwd()
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric","character","factor","numeric","numeric"))
head(pollution)
source('C:/Jing/ProgramCode/DataScience/C3_ExploratoryDataAnalysis/Week1/week1_lecture.R', echo=TRUE)
boxplot(pollution$pm25, col = "blue")
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
hist(pollution$pm25, col = "green", breaks = 100)
boxplot(pollution$pm25, col = "blue")
abline(h=12)
hist(pollution$pm25, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(pollution$pm25), col = magenta, lwd = 4)
abline(v = median(pollution$pm25), col = "magenta", lwd = 4)
barplot(table(pollution$region), col = "wheat", main = "numbers of Countries in East region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2,1), mar = c(4,4,2,1))
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25), col = region)
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25))
par(mfrow = c(1,2), mar = c(5,4,2,1))
with(subset(pollution, region == "west")$pm25, plot(latitude, pm25, main = "west"))
with(subset(pollution, region == "east")$pm25, plot(latitude, pm25, main = "East"))
par(mfrow = c(1,2), mar = c(5,4,2,1))
with(subset(pollution, region == "west")$pm25, plot(latitude, pm25, main = "west"))
with(subset(pollution, region == "east")$pm25, plot(latitude, pm25, main = "East"))
with(subset(pollution, region == "west"), plot(latitude, pm25, main = "west"))
with(subset(pollution, region == "east"), plot(latitude, pm25, main = "East"))
